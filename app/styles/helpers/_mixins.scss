@mixin clearfix() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin ellipsis($max-width) {
    max-width: $max-width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin respond-to($media...) {
    @each $mediatype in $media {
        @include breakpoints($mediatype) {@content}
    }
}

@mixin breakpoints($media) {
    @if $media == phone {
        @media (max-width: map-get($media-queries, 'phone')-1+'px') { @content; }
    }
    @else if $media == xs-devices {
        @media (min-width: map-get($media-queries, 'phone')+'px') and (max-width: map-get($media-queries, 'sm-devices')-1+'px') { @content }
    }
    @else if $media == sm-devices {
        @media (min-width: map-get($media-queries, 'sm-devices')+'px') and (max-width: map-get($media-queries, 'md-devices')-1+'px') { @content }
    }
    @else if $media == md-devices {
        @media (min-width: map-get($media-queries, 'md-devices')+'px') and (max-width: map-get($media-queries, 'lg-devices')-1+'px') { @content }
    }
    @else if $media == lg-devices {
        @media (min-width: map-get($media-queries, 'lg-devices')+'px') { @content }
    }
    @else if $media == xs-devices-and-up {
        @media (min-width: map-get($media-queries, 'phone')+'px') { @content }
    }
    @else if $media == sm-devices-and-up {
        @media (min-width: map-get($media-queries, 'sm-devices')+'px') { @content }
    }
    @else if $media == md-devices-and-up {
        @media (min-width: map-get($media-queries, 'md-devices')+'px') { @content }
    }
    // Non-Retina
    @else if $media == non-retina {
        @media screen and (-webkit-max-device-pixel-ratio: 1) { @content; }
    }
    // Retina Only
    @else if $media == retina {
        @media screen and (-webkit-min-device-pixel-ratio: 2) { @content; }
    }
    // Specific max width
    @else {
        @media only screen and (max-width: #{$media}px) { @content; }
    }
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin svg($name, $color: '') {
    @if map-has-key($svg, $name) {
        $icon: map-get($svg, $name);
        $color: str_replace("#{$color}", '#', '%23');
        background-image: url( str_replace($icon, '{$color}', $color) );
        background-repeat: no-repeat;
    } @else {
        @warn "Svg doesn't exists: #{$name}";
    }
}


/**
    <label class="checkbox-switch">
        <input type="checkbox">
        <span></span>
    </label>
 */
@mixin checkbox-switch($width: 100, $height: 43, $toggler-width: 32, $toggler-padding: 6, $font-size: 16, $text-distance: 20) {
    $checkbox-left-pos: $width - $toggler-width - $toggler-padding;
    position: relative;
    border-radius: 20px;
    width: #{$width}px;
    height: #{$height}px;
    overflow: hidden;
    margin-bottom: 0;
    cursor: pointer;
    input {
        display: none;
    }
    span {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #a9a9a9;
        border-radius: 20px;
        &:before {
            content: "";
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            left: #{$toggler-padding}px;
            width: #{$toggler-width}px;
            height: #{$toggler-width}px;
            background-color: #fff;
            border-radius: 100%;
            transition: all 0.3s ease;
            font-size: #{$font-size}px;
        }
        &:after {
            content: 'Off';
            font-weight: bold;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: #{$text-distance}px;
            color: #fff;
            font-size: #{$font-size}px;
        }
    }
    input[type="checkbox"]:checked + span {
        background-color: $color-secondary;
        &:before {
            left: #{$checkbox-left-pos}px;
        }
        &:after {
            content: 'On';
            right: auto;
            left: #{$text-distance}px;
        }
    }
}


/**
 * <span class="input-note"></span>
 */
@mixin input-note($color-border: $color-border, $color-bg: #f6f9fa) {
    $arrow-height: 15;
    position: relative;
    border: 1px solid $color-border;
    background-color: $color-bg;
    padding: 18px 20px;
    border-radius: 25px;
    display: inline-block;
    margin-top: #{$arrow-height+3}px;
    color: #a9a9a9;
    font-size: 16px;
    min-width: 100px;
    &:after,
    &:before {
        position: absolute;
        top: #{-$arrow-height}px;
        left: 42px;
        content: '';
        width: 0;
        height: 0;
    }
    &:before {
        top: #{-($arrow-height+1)}px;
        border-left: #{$arrow-height}px solid transparent;
        border-right: #{$arrow-height}px solid transparent;
        border-bottom: #{$arrow-height}px solid $color-border;
    }
    &:after {
        border-left: #{$arrow-height}px solid transparent;
        border-right: #{$arrow-height}px solid transparent;
        border-bottom: #{$arrow-height}px solid $color-bg;
    }
}
